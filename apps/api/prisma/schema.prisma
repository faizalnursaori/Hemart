generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String              
  email              String               @unique
  password           String
  isVerified         Boolean              @default(false)
  role               Role                 @default(USER)
  image              String               @default("/profile.jpg")
  provider           String?
  name               String?
  gender             String?
  dob                DateTime?
  mobileNumber       String?
  referralCode       String?              @unique
  referredBy         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  addresses          Address[]
  carts              Cart[]
  warehouse          Warehouse?
  userVouchers       UserVoucher[]
  transactionHistory TransactionHistory[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

model Category {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id             Int             @id @default(autoincrement())
  slug           String          @unique
  name           String          @unique
  description    String          @db.Text
  price          Float
  categoryId     Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  category       Category        @relation(fields: [categoryId], references: [id])
  productImages  ProductImage[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  productStocks  ProductStock[]
  stockTransfers StockTransfer[]
  vouchers       Voucher[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Address {
  id         Int      @id @default(autoincrement())
  name       String
  address    String   @db.Text
  provinceId Int
  cityId     Int
  postalCode String
  isPrimary  Boolean  @default(false)
  userId     Int
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  province   Province @relation(fields: [provinceId], references: [id], onDelete: NoAction)
  city       City     @relation(fields: [cityId], references: [id], onDelete: NoAction)
  orders     Order[]
}

model Province {
  id         Int         @id
  name       String
  cities     City[]
  addresses  Address[]
  warehouses Warehouse[]
}

model City {
  id         Int         @id @default(autoincrement())
  name       String
  provinceId Int
  province   Province    @relation(fields: [provinceId], references: [id])
  addresses  Address[]
  warehouses Warehouse[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  isActive  Boolean    @default(true)
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  order     Order?
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int
  cartId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
}

model Order {
  id                 Int                  @id @default(autoincrement())
  name               String
  paymentStatus      PaymentStatus
  shippingCost       Float
  total              Float
  paymentMethod      String
  paymentProof       String?
  expirePayment      DateTime
  warehouseId        Int
  cartId             Int                  @unique
  addressId          Int
  voucherId          Int?
  shippedAt          DateTime?
  cancellationSource CancellationSource?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  warehouse          Warehouse            @relation(fields: [warehouseId], references: [id], onDelete: NoAction)
  cart               Cart                 @relation(fields: [cartId], references: [id], onDelete: NoAction)
  address            Address              @relation(fields: [addressId], references: [id], onDelete: Cascade)
  voucher            Voucher?             @relation(fields: [voucherId], references: [id], onDelete: NoAction)
  items              OrderItem[]
  transactionHistory TransactionHistory[]
}

model Voucher {
  id                Int           @id @default(autoincrement())
  code              String        @unique
  discountType      DiscountType
  discountValue     Float
  minPurchase       Float?
  maxDiscount       Float?
  productId         Int?
  isShippingVoucher Boolean       @default(false)
  expiryDate        DateTime
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  product           Product?      @relation(fields: [productId], references: [id])
  userVouchers      UserVoucher[]
  orders            Order[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  voucher   Voucher  @relation(fields: [voucherId], references: [id])
}

model TransactionHistory {
  id        Int             @id @default(autoincrement())
  userId    Int
  orderId   Int
  amount    Float
  type      TransactionType
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: NoAction)
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  SHIPPED
  DELIVERED
  CANCELED
}

enum CancellationSource {
  USER
  SYSTEM
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  total     Float
  orderId   Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: NoAction)
}

model Warehouse {
  id                Int                @id @default(autoincrement())
  name              String
  address           String             @db.Text
  provinceId        Int
  cityId            Int
  postalCode        String
  latitude          Float?
  longitude         Float?
  storeRadius       Float
  userId            Int                @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: NoAction)
  province          Province           @relation(fields: [provinceId], references: [id], onDelete: NoAction)
  city              City               @relation(fields: [cityId], references: [id], onDelete: NoAction)
  productStocks     ProductStock[]     
  orders            Order[]
  stockTransferLogs StockTransferLog[]
  sourceMutations     StockTransfer[]         @relation("SourceWarehouse")
  destinationutations StockTransfer[]         @relation("DestinationWarehouse")
}

model ProductStock {
  id           Int                @id @default(autoincrement())
  stock        Int
  productId    Int
  warehouseId  Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deleted      Boolean            @default(false)
  product      Product            @relation(fields: [productId], references: [id], onDelete: NoAction  )
  warehouse    Warehouse          @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  transferLogs StockTransferLog[]

  @@unique([productId, warehouseId])
}

model StockTransfer {
  id           Int            @id @default(autoincrement())
  stockRequest Int
  stockProcess Int
  note         String         @db.Text
  productId    Int
  sourceWarehouseId      Int?
  destinationWarehouseId Int?
  status       TransferStatus
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  product      Product        @relation(fields: [productId], references: [id])
  sourceWarehouse      Warehouse?         @relation("SourceWarehouse", fields: [sourceWarehouseId], references: [id])
  destinationWarehouse Warehouse?         @relation("DestinationWarehouse", fields: [destinationWarehouseId], references: [id])
}

enum TransferStatus {
  PENDING
  REJECTED
  COMPLETED
}

model StockTransferLog {
  id              Int             @id @default(autoincrement())
  quantity        Int
  transactionType TransactionType
  description     String          @db.Text
  productStockId  Int
  warehouseId     Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  productStock    ProductStock    @relation(fields: [productStockId], references: [id], onDelete: Cascade)
  warehouse       Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  IN
  OUT
  PURCHASE
  REFUND
}